{"version":3,"file":"static/js/7889.423d36af.chunk.js","mappings":"4HAEO,MAAMA,EAAcC,EAAAA,GAAOC,GAAG;;;;EAMdD,EAAAA,GAAOC,GAAG;;;4LCEjC,MAAMC,EAAcF,EAAAA,GAAOC,GAAG;;EAIjBE,EAA0CA,KACrD,MAAMC,EAAoF,CAAC,EAC3FC,OAAOC,KAAKC,GACTC,QAAQC,GAAwD,oBAAxCF,EAAOE,KAC/BD,QAAQC,IAAU,qBAAqBC,KAAKD,KAC5CE,SAASF,IACRL,EAAWK,GAAQF,EAAOE,EAA4B,IAE1D,MAAOG,EAAaC,IAAkBC,EAAAA,EAAAA,YAChCC,GAAQC,EAAAA,EAAAA,KACRC,EAAeb,EAAWQ,GAAgBR,EAAWQ,GAAgBG,EAAMA,MAI3EG,GAASC,EAAAA,EAAAA,YAAWC,EAAAA,IAC1B,OACEC,EAAAA,EAAAA,MAACtB,EAAAA,GAAW,CAAAuB,SAAA,EACVC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CACTC,MAAOP,EAAOQ,MACdX,MAAOE,EACPU,OAAO,mBACPC,MAAO,CAAEC,OAAQ,cACjBC,WAAY,CAACC,EAAAA,GAAMC,eAErBX,EAAAA,EAAAA,MAACnB,EAAW,CAAAoB,SAAA,CAAC,iBAEXD,EAAAA,EAAAA,MAAA,UAAQI,MAAOb,EAAaqB,SAfZC,IACpBrB,EAAeqB,EAAGC,OAAOV,MAAiC,EAcHH,SAAA,EACjDC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,iBACPjB,OAAOC,KAAKF,GAAYgC,KAAI,CAACC,EAASC,KAC9Bf,EAAAA,EAAAA,KAAA,UAAAD,SAAqBe,GAARC,SAGxBf,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACgB,EAAAA,GAAI,CAACC,GAAG,cAAalB,SAAC,2BAEb,EAILmB,EAAYA,KAErBlB,EAAAA,EAAAA,KAACmB,EAAAA,GAAO,CAACC,KAAMA,IAAM,gCAA+CrB,UAClEC,EAAAA,EAAAA,KAACpB,EAAgB,K,kDCrDhB,SAASa,IAAyD,IAAhD4B,EAAmCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,QAC7D,MAAMG,EAAOC,SAASC,gBAAgBC,aAAa,oBAC5CpC,EAAOqC,IAAYtC,EAAAA,EAAAA,UAAiD,SAATkC,EAAkB,OAASJ,GAO7F,OANAS,EAAAA,EAAAA,YAAU,KACRD,EAAsE,SAA7DH,SAASC,gBAAgBC,aAAa,mBAAgC,OAAS,SACxFF,SAASK,iBAAiB,qBAAsBC,IAC9CH,EAASG,EAAEC,OAAOC,YAA6C,GAC/D,GACD,IACI,CAAE1C,QAAOqC,WAClB,C","sources":["pages/extensions/index.tsx","pages/extensions/themes/index.tsx","utils/useTheme.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const PageWarpper = styled.div`\n  flex: 1;\n  max-width: 980px;\n  padding: 20px 20px 30px 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex: 1;\n`;\n\nexport const Extensions = () => {};\n","import { FC, PropsWithChildren, useContext, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport CodeMirror, { ReactCodeMirrorProps } from '@uiw/react-codemirror';\nimport * as themes from '@uiw/codemirror-themes-all';\nimport { langs } from '@uiw/codemirror-extensions-langs';\nimport styled from 'styled-components';\nimport { Preview, MdContext } from '../../theme/Preview';\nimport { useTheme } from '../../../utils/useTheme';\nimport { PageWarpper } from '..';\n\nconst ToolsWapper = styled.div`\n  padding: 0 0 23px 0;\n`;\n\nexport const ThemesAllExample: FC<PropsWithChildren> = () => {\n  const themesData: Record<string, Omit<ReactCodeMirrorProps['theme'], 'dark' | 'light'>> = {};\n  Object.keys(themes)\n    .filter((item) => typeof themes[item as keyof typeof themes] !== 'function')\n    .filter((item) => !/^(defaultSettings)/.test(item as keyof typeof themes))\n    .forEach((item) => {\n      themesData[item] = themes[item as keyof typeof themes];\n    });\n  const [selectTheme, setSelectTheme] = useState<keyof typeof themesData>();\n  const theme = useTheme();\n  const themeCurrent = themesData[selectTheme!] ? themesData[selectTheme!] : theme.theme;\n  const changeHandle = (ev: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectTheme(ev.target.value as keyof typeof themesData);\n  };\n  const mdData = useContext(MdContext);\n  return (\n    <PageWarpper>\n      <CodeMirror\n        value={mdData.mdstr}\n        theme={themeCurrent as ReactCodeMirrorProps['theme']}\n        height=\"300px !important\"\n        style={{ margin: '0 0 23px 0' }}\n        extensions={[langs.markdown()]}\n      />\n      <ToolsWapper>\n        Select Theme:\n        <select value={selectTheme} onChange={changeHandle}>\n          <option>Select Theme</option>\n          {Object.keys(themesData).map((keyname, index) => {\n            return <option key={index}>{keyname}</option>;\n          })}\n        </select>\n        <br />\n        <Link to=\"/theme/home\">All Theme Example</Link>\n      </ToolsWapper>\n    </PageWarpper>\n  );\n};\n\nexport const Component = () => {\n  return (\n    <Preview path={() => import('@uiw/codemirror-themes-all/README.md')}>\n      <ThemesAllExample />\n    </Preview>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { ReactCodeMirrorProps } from '@uiw/react-codemirror';\n\nexport function useTheme(name: ReactCodeMirrorProps['theme'] = 'light') {\n  const dark = document.documentElement.getAttribute('data-color-mode');\n  const [theme, setTheme] = useState<ReactCodeMirrorProps['theme']>(dark === 'dark' ? 'dark' : name);\n  useEffect(() => {\n    setTheme(document.documentElement.getAttribute('data-color-mode') === 'dark' ? 'dark' : 'light');\n    document.addEventListener('colorschemechange', (e) => {\n      setTheme(e.detail.colorScheme as ReactCodeMirrorProps['theme']);\n    });\n  }, []);\n  return { theme, setTheme };\n}\n"],"names":["PageWarpper","styled","div","ToolsWapper","ThemesAllExample","themesData","Object","keys","themes","filter","item","test","forEach","selectTheme","setSelectTheme","useState","theme","useTheme","themeCurrent","mdData","useContext","MdContext","_jsxs","children","_jsx","CodeMirror","value","mdstr","height","style","margin","extensions","langs","markdown","onChange","ev","target","map","keyname","index","Link","to","Component","Preview","path","name","arguments","length","undefined","dark","document","documentElement","getAttribute","setTheme","useEffect","addEventListener","e","detail","colorScheme"],"sourceRoot":""}