"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[8263],{98263:(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});const r={components:{},data:{},source:"\x3c!--rehype:ignore:start--\x3e\n\n# react-codemirror-merge\n\n\x3c!--rehype:ignore:end--\x3e\n\n[![Buy me a coffee](https://img.shields.io/badge/Buy%20me%20a%20coffee-048754?logo=buymeacoffee)](https://jaywcjlove.github.io/#/sponsor)\n[![npm version](https://img.shields.io/npm/v/react-codemirror-merge.svg)](https://www.npmjs.com/package/react-codemirror-merge)\n\nCodeMirror merge view for React.\n\n<a href=\"https://uiwjs.github.io/react-codemirror/#/merge/document\">\n  <img width=\"436\" alt=\"codemirror-theme-androidstudio\" src=\"https://user-images.githubusercontent.com/1680273/230655848-821b9390-9bed-4f28-b52e-f96b59228bfa.png\">\n</a>\n\n## Install\n\n```bash\nnpm install react-codemirror-merge --save\n```\n\n## Usage\n\n```jsx\nimport CodeMirrorMerge from 'react-codemirror-merge';\nimport { EditorView } from 'codemirror';\nimport { EditorState } from '@codemirror/state';\n\nconst Original = CodeMirrorMerge.Original;\nconst Modified = CodeMirrorMerge.Modified;\nlet doc = `one\ntwo\nthree\nfour\nfive`;\n\nexport const Example = () => {\n  return (\n    <CodeMirrorMerge orientation=\"b-a\">\n      <Original value={doc} />\n      <Modified\n        value={doc.replace(/t/g, 'T') + 'Six'}\n        extensions={[EditorView.editable.of(false), EditorState.readOnly.of(true)]}\n      />\n    </CodeMirrorMerge>\n  );\n};\n```\n\n## Theme\n\n```jsx\nimport { useState } from 'react';\nimport CodeMirrorMerge from 'react-codemirror-merge';\nimport { EditorView } from 'codemirror';\nimport { EditorState } from '@codemirror/state';\n\nconst Original = CodeMirrorMerge.Original;\nconst Modified = CodeMirrorMerge.Modified;\nlet doc = `one\ntwo\nthree\nfour\nfive`;\n\nexport const Example = () => {\n  const [theme, setTheme] = useState('light');\n  return (\n    <CodeMirrorMerge orientation=\"b-a\" theme={theme}>\n      <Original value={doc} />\n      <Modified\n        value={doc.replace(/t/g, 'T') + 'Six'}\n        extensions={[EditorView.editable.of(false), EditorState.readOnly.of(true)]}\n      />\n    </CodeMirrorMerge>\n  );\n};\n```\n\n```jsx\nimport React, { useState } from 'react';\nimport CodeMirrorMerge from 'react-codemirror-merge';\nimport { EditorView } from '@codemirror/view';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { githubLight, githubDark } from '@uiw/codemirror-theme-github';\n\nconst Original = CodeMirrorMerge.Original;\nconst Modified = CodeMirrorMerge.Modified;\nlet doc = `function examle() {\n\n}`;\n\nfunction Example() {\n  const [theme, setTheme] = useState('light');\n  return (\n    <div>\n      <CodeMirrorMerge theme={theme === 'light' ? githubLight : githubDark} orientation=\"a-b\">\n        <Original extensions={[javascript({ jsx: true }), EditorView.lineWrapping]} value={doc} />\n        <Modified extensions={[EditorView.lineWrapping, javascript({ jsx: true })]} value={doc.replace(/e/g, 'T')} />\n      </CodeMirrorMerge>\n      <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>Change Theme {theme}</button>\n    </div>\n  );\n}\n```\n\n## Props\n\n```ts\nimport { Extension } from '@codemirror/state';\nexport interface CodeMirrorMergeRef extends InternalRef {}\nexport interface CodeMirrorMergeProps extends React.HTMLAttributes<HTMLDivElement>, MergeConfig {\n  theme?: 'light' | 'dark' | 'none' | Extension;\n}\n\ninterface MergeConfig {\n  /**\n  Controls whether editor A or editor B is shown first. Defaults\n  to `\"a-b\"`.\n  */\n  orientation?: 'a-b' | 'b-a';\n  /**\n  Controls whether revert controls are shown between changed\n  chunks.\n  */\n  revertControls?: 'a-to-b' | 'b-to-a';\n  /**\n  When given, this function is called to render the button to\n  revert a chunk.\n  */\n  renderRevertControl?: () => HTMLElement;\n  /**\n  By default, the merge view will mark inserted and deleted text\n  in changed chunks. Set this to false to turn that off.\n  */\n  highlightChanges?: boolean;\n  /**\n  Controls whether a gutter marker is shown next to changed lines.\n  */\n  gutter?: boolean;\n  /**\n  When given, long stretches of unchanged text are collapsed.\n  `margin` gives the number of lines to leave visible after/before\n  a change (default is 3), and `minSize` gives the minimum amount\n  of collapsible lines that need to be present (defaults to 4).\n  */\n  collapseUnchanged?: {\n    margin?: number;\n    minSize?: number;\n  };\n}\n```\n\n## Modified Props\n\n```ts\ninterface ModifiedProps extends Omit<DefaultExtensionsOptions, 'theme'> {\n  /**\n  The initial document. Defaults to an empty document. Can be\n  provided either as a plain string (which will be split into\n  lines according to the value of the [`lineSeparator`\n  facet](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)), or an instance of\n  the [`Text`](https://codemirror.net/6/docs/ref/#state.Text) class (which is what the state will use\n  to represent the document).\n  */\n  value?: string | Text;\n  /**\n  The starting selection. Defaults to a cursor at the very start\n  of the document.\n  */\n  selection?:\n    | EditorSelection\n    | {\n        anchor: number;\n        head?: number;\n      };\n  /**\n  [Extension(s)](https://codemirror.net/6/docs/ref/#state.Extension) to associate with this state.\n  */\n  extensions?: Extension;\n  /** Fired whenever a change occurs to the document. */\n  onChange?(value: string, viewUpdate: ViewUpdate): void;\n}\n\nimport { Extension } from '@codemirror/state';\nimport { BasicSetupOptions } from '@uiw/codemirror-extensions-basic-setup';\nimport { DefaultExtensionsOptions } from '@uiw/react-codemirror';\n\nexport interface DefaultExtensionsOptions {\n  indentWithTab?: boolean;\n  basicSetup?: boolean | BasicSetupOptions;\n  placeholder?: string | HTMLElement;\n  theme?: 'light' | 'dark' | 'none' | Extension;\n  readOnly?: boolean;\n  editable?: boolean;\n}\n```\n\n## Original Props\n\n```ts\ninterface OriginalProps extends Omit<DefaultExtensionsOptions, 'theme'> {\n  /**\n  The initial document. Defaults to an empty document. Can be\n  provided either as a plain string (which will be split into\n  lines according to the value of the [`lineSeparator`\n  facet](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)), or an instance of\n  the [`Text`](https://codemirror.net/6/docs/ref/#state.Text) class (which is what the state will use\n  to represent the document).\n  */\n  value?: string | Text;\n  /**\n  The starting selection. Defaults to a cursor at the very start\n  of the document.\n  */\n  selection?:\n    | EditorSelection\n    | {\n        anchor: number;\n        head?: number;\n      };\n  /**\n  [Extension(s)](https://codemirror.net/6/docs/ref/#state.Extension) to associate with this state.\n  */\n  extensions?: Extension;\n  /** Fired whenever a change occurs to the document. */\n  onChange?(value: string, viewUpdate: ViewUpdate): void;\n}\n\nimport { Extension } from '@codemirror/state';\nimport { BasicSetupOptions } from '@uiw/codemirror-extensions-basic-setup';\nimport { DefaultExtensionsOptions } from '@uiw/react-codemirror';\n\nexport interface DefaultExtensionsOptions {\n  indentWithTab?: boolean;\n  basicSetup?: boolean | BasicSetupOptions;\n  placeholder?: string | HTMLElement;\n  theme?: 'light' | 'dark' | 'none' | Extension;\n  readOnly?: boolean;\n  editable?: boolean;\n}\n```\n\n## Contributors\n\nAs always, thanks to our amazing contributors!\n\n<a href=\"https://github.com/uiwjs/react-codemirror/graphs/contributors\">\n  <img src=\"https://uiwjs.github.io/react-codemirror/CONTRIBUTORS.svg\" />\n</a>\n\nMade with [github-action-contributors](https://github.com/jaywcjlove/github-action-contributors).\n\n## License\n\nLicensed under the MIT License.\n",headings:[],headingsList:[]}}}]);
//# sourceMappingURL=8263.1369f43b.chunk.js.map