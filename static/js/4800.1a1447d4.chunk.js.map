{"version":3,"file":"static/js/4800.1a1447d4.chunk.js","mappings":"sPASA,MAAMA,EAAOC,EAAAA,GAAOC,GAAG;;EAIVC,EAAgBA,KAC3B,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,IACpCC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,KACrC,MAAEG,IAAUC,EAAAA,EAAAA,KACZC,GAASC,EAAAA,EAAAA,YAAWC,EAAAA,IAC1B,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAAAC,SAAA,EACVC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CACTC,MAAOR,EAAOS,MACdX,MAAOA,EACPY,OAAO,mBACPC,MAAO,CAAEC,OAAQ,cACjBC,WAAY,CACVC,EAAAA,GAAMC,WACNC,EAAAA,GAAc,CACZC,OAASC,IACHA,EAAIC,kBAAkBC,aACxB1B,EAAawB,EAAIC,OAAO1B,UAC1B,IAGJuB,EAAAA,GAAe,CACbK,MAAQH,IACNrB,EAAa,QAAQ,EAEvByB,KAAOJ,IACLrB,EAAa,OAAO,QAK5BM,EAAAA,EAAAA,MAACd,EAAI,CAAAgB,SAAA,CACFZ,EAAU,IAAEG,OAEH,EAIL2B,EAAYA,KAErBjB,EAAAA,EAAAA,KAACkB,EAAAA,GAAO,CAACC,KAAMA,IAAM,gCAAsDpB,UACzEC,EAAAA,EAAAA,KAACd,EAAa,K,mDCpDb,MAAMY,EAAcd,EAAAA,GAAOC,GAAG;;;;EAMdD,EAAAA,GAAOC,GAAG;;;mDCL1B,SAASQ,IAAyD,IAAhD2B,EAAmCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,QAC7D,MAAMG,EAAOC,SAASC,gBAAgBC,aAAa,oBAC5CnC,EAAOoC,IAAYvC,EAAAA,EAAAA,UAAiD,SAATmC,EAAkB,OAASJ,GAO7F,OANAS,EAAAA,EAAAA,YAAU,KACRD,EAAsE,SAA7DH,SAASC,gBAAgBC,aAAa,mBAAgC,OAAS,SACxFF,SAASK,iBAAiB,qBAAsBC,IAC9CH,EAASG,EAAEC,OAAOC,YAA6C,GAC/D,GACD,IACI,CAAEzC,QAAOoC,WAClB,C,4DCZO,SAASM,EAAQC,GACtB,IAAI,KACFC,EAAO,SAAQ,OACf1B,EAAM,MACN2B,GACEF,EACJ,OAAOG,EAAAA,GAAWC,UAAU,MAC1BC,WAAAA,CAAYC,IACVC,KAAKC,SAAM,EACXD,KAAKD,UAAO,EACZC,KAAKD,KAAOA,EAEVC,KAAKC,IADM,QAATP,EACSK,EAAKE,IACE,YAATP,EACEK,EAAKG,WAELH,EAAKI,UAIdH,KAAKC,KAAON,IACHS,OAAOC,KAAKV,GAClBW,SAAQC,IACXP,KAAKC,IAAIM,GAAOZ,EAAMY,EAAI,IAG9BH,OAAOC,KAAKrC,GAAU,CAAC,GAAGsC,SAAQE,IAC5BxC,GAAUA,EAAOwC,IAAYR,KAAKC,KACpCD,KAAKC,IAAIb,iBAAiBoB,EAASxC,EAAOwC,GAC5C,GAEJ,CACAC,OAAAA,GACEL,OAAOC,KAAKrC,GAAU,CAAC,GAAGsC,SAAQE,IAC5BxC,GAAUA,EAAOwC,IAAYR,KAAKC,KACpCD,KAAKC,IAAIS,oBAAoBF,EAASxC,EAAOwC,GAC/C,GAEJ,GAEJ,CAcO,SAASvC,EAAOwB,GACrB,OAAOD,EAAQ,CACbE,KAAM,SACN1B,OAAQyB,GAEZ,CAMO,SAASkB,EAAQlB,GACtB,OAAOD,EAAQ,CACbE,KAAM,UACN1B,OAAQyB,GAEZ,C","sources":["pages/extensions/events/index.tsx","pages/extensions/index.tsx","utils/useTheme.tsx","../../extensions/events/esm/index.js"],"sourcesContent":["import * as events from '@uiw/codemirror-extensions-events';\nimport CodeMirror from '@uiw/react-codemirror';\nimport styled from 'styled-components';\nimport { useContext, useState } from 'react';\nimport { langs } from '@uiw/codemirror-extensions-langs';\nimport { Preview, MdContext } from '../../theme/Preview';\nimport { useTheme } from '../../../utils/useTheme';\nimport { PageWarpper } from '..';\n\nconst Info = styled.div`\n  padding-bottom: 30px;\n`;\n\nexport const EventsExample = () => {\n  const [scrollTop, setScrollTop] = useState(0);\n  const [eventType, setEventType] = useState('');\n  const { theme } = useTheme();\n  const mdData = useContext(MdContext);\n  return (\n    <PageWarpper>\n      <CodeMirror\n        value={mdData.mdstr}\n        theme={theme}\n        height=\"200px !important\"\n        style={{ margin: '0 0 23px 0' }}\n        extensions={[\n          langs.markdown(),\n          events.scroll({\n            scroll: (evn) => {\n              if (evn.target instanceof HTMLElement) {\n                setScrollTop(evn.target.scrollTop);\n              }\n            },\n          }),\n          events.content({\n            focus: (evn) => {\n              setEventType('focus');\n            },\n            blur: (evn) => {\n              setEventType('blur');\n            },\n          }),\n        ]}\n      />\n      <Info>\n        {scrollTop} {eventType}\n      </Info>\n    </PageWarpper>\n  );\n};\n\nexport const Component = () => {\n  return (\n    <Preview path={() => import('@uiw/codemirror-extensions-events/README.md')}>\n      <EventsExample />\n    </Preview>\n  );\n};\n","import styled from 'styled-components';\n\nexport const PageWarpper = styled.div`\n  flex: 1;\n  max-width: 980px;\n  padding: 20px 20px 30px 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex: 1;\n`;\n\nexport const Extensions = () => {};\n","import { useEffect, useState } from 'react';\nimport { ReactCodeMirrorProps } from '@uiw/react-codemirror';\n\nexport function useTheme(name: ReactCodeMirrorProps['theme'] = 'light') {\n  const dark = document.documentElement.getAttribute('data-color-mode');\n  const [theme, setTheme] = useState<ReactCodeMirrorProps['theme']>(dark === 'dark' ? 'dark' : name);\n  useEffect(() => {\n    setTheme(document.documentElement.getAttribute('data-color-mode') === 'dark' ? 'dark' : 'light');\n    document.addEventListener('colorschemechange', (e) => {\n      setTheme(e.detail.colorScheme as ReactCodeMirrorProps['theme']);\n    });\n  }, []);\n  return { theme, setTheme };\n}\n","import { ViewPlugin } from '@codemirror/view';\nexport function element(opts) {\n  var {\n    type = 'scroll',\n    events,\n    props\n  } = opts;\n  return ViewPlugin.fromClass(class {\n    constructor(view) {\n      this.dom = void 0;\n      this.view = void 0;\n      this.view = view;\n      if (type === 'dom') {\n        this.dom = view.dom;\n      } else if (type === 'content') {\n        this.dom = view.contentDOM;\n      } else {\n        this.dom = view.scrollDOM;\n      }\n\n      // Apply props to the DOM element\n      if (this.dom && props) {\n        var keys = Object.keys(props);\n        keys.forEach(key => {\n          this.dom[key] = props[key];\n        });\n      }\n      Object.keys(events || {}).forEach(keyname => {\n        if (events && events[keyname] && this.dom) {\n          this.dom.addEventListener(keyname, events[keyname]);\n        }\n      });\n    }\n    destroy() {\n      Object.keys(events || {}).forEach(keyname => {\n        if (events && events[keyname] && this.dom) {\n          this.dom.removeEventListener(keyname, events[keyname]);\n        }\n      });\n    }\n  });\n}\n/**\n * The DOM element that can be styled to scroll.\n * (Note that it may not have been, so you can't assume this is scrollable.)\n */\nexport function dom(opts) {\n  return element({\n    type: 'dom',\n    events: opts\n  });\n}\n/**\n * The DOM element that wraps the entire editor view.\n */\nexport function scroll(opts) {\n  return element({\n    type: 'scroll',\n    events: opts\n  });\n}\n/**\n * The editable DOM element holding the editor content.\n * You should not, usually, interact with this content directly though the DOM,\n * since the editor will immediately undo most of the changes you make.\n */\nexport function content(opts) {\n  return element({\n    type: 'content',\n    events: opts\n  });\n}"],"names":["Info","styled","div","EventsExample","scrollTop","setScrollTop","useState","eventType","setEventType","theme","useTheme","mdData","useContext","MdContext","_jsxs","PageWarpper","children","_jsx","CodeMirror","value","mdstr","height","style","margin","extensions","langs","markdown","events","scroll","evn","target","HTMLElement","focus","blur","Component","Preview","path","name","arguments","length","undefined","dark","document","documentElement","getAttribute","setTheme","useEffect","addEventListener","e","detail","colorScheme","element","opts","type","props","ViewPlugin","fromClass","constructor","view","this","dom","contentDOM","scrollDOM","Object","keys","forEach","key","keyname","destroy","removeEventListener","content"],"sourceRoot":""}